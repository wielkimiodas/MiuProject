//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace RaceGamePhone.MiuWebService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputState", Namespace="http://schemas.datacontract.org/2004/07/RaceGame")]
    public partial class InputState : object, System.ComponentModel.INotifyPropertyChanged {
        
        private float accelerationField;
        
        private float breakValField;
        
        private float steerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float acceleration {
            get {
                return this.accelerationField;
            }
            set {
                if ((this.accelerationField.Equals(value) != true)) {
                    this.accelerationField = value;
                    this.RaisePropertyChanged("acceleration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float breakVal {
            get {
                return this.breakValField;
            }
            set {
                if ((this.breakValField.Equals(value) != true)) {
                    this.breakValField = value;
                    this.RaisePropertyChanged("breakVal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float steer {
            get {
                return this.steerField;
            }
            set {
                if ((this.steerField.Equals(value) != true)) {
                    this.steerField = value;
                    this.RaisePropertyChanged("steer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MiuWebService.ISteeringReceiver")]
    public interface ISteeringReceiver {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISteeringReceiver/DoSteer", ReplyAction="http://tempuri.org/ISteeringReceiver/DoSteerResponse")]
        System.IAsyncResult BeginDoSteer(RaceGamePhone.MiuWebService.InputState state, System.AsyncCallback callback, object asyncState);
        
        bool EndDoSteer(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISteeringReceiverChannel : RaceGamePhone.MiuWebService.ISteeringReceiver, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoSteerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoSteerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SteeringReceiverClient : System.ServiceModel.ClientBase<RaceGamePhone.MiuWebService.ISteeringReceiver>, RaceGamePhone.MiuWebService.ISteeringReceiver {
        
        private BeginOperationDelegate onBeginDoSteerDelegate;
        
        private EndOperationDelegate onEndDoSteerDelegate;
        
        private System.Threading.SendOrPostCallback onDoSteerCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SteeringReceiverClient() {
        }
        
        public SteeringReceiverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SteeringReceiverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SteeringReceiverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SteeringReceiverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<DoSteerCompletedEventArgs> DoSteerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RaceGamePhone.MiuWebService.ISteeringReceiver.BeginDoSteer(RaceGamePhone.MiuWebService.InputState state, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoSteer(state, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool RaceGamePhone.MiuWebService.ISteeringReceiver.EndDoSteer(System.IAsyncResult result) {
            return base.Channel.EndDoSteer(result);
        }
        
        private System.IAsyncResult OnBeginDoSteer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RaceGamePhone.MiuWebService.InputState state = ((RaceGamePhone.MiuWebService.InputState)(inValues[0]));
            return ((RaceGamePhone.MiuWebService.ISteeringReceiver)(this)).BeginDoSteer(state, callback, asyncState);
        }
        
        private object[] OnEndDoSteer(System.IAsyncResult result) {
            bool retVal = ((RaceGamePhone.MiuWebService.ISteeringReceiver)(this)).EndDoSteer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoSteerCompleted(object state) {
            if ((this.DoSteerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoSteerCompleted(this, new DoSteerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoSteerAsync(RaceGamePhone.MiuWebService.InputState state) {
            this.DoSteerAsync(state, null);
        }
        
        public void DoSteerAsync(RaceGamePhone.MiuWebService.InputState state, object userState) {
            if ((this.onBeginDoSteerDelegate == null)) {
                this.onBeginDoSteerDelegate = new BeginOperationDelegate(this.OnBeginDoSteer);
            }
            if ((this.onEndDoSteerDelegate == null)) {
                this.onEndDoSteerDelegate = new EndOperationDelegate(this.OnEndDoSteer);
            }
            if ((this.onDoSteerCompletedDelegate == null)) {
                this.onDoSteerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoSteerCompleted);
            }
            base.InvokeAsync(this.onBeginDoSteerDelegate, new object[] {
                        state}, this.onEndDoSteerDelegate, this.onDoSteerCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override RaceGamePhone.MiuWebService.ISteeringReceiver CreateChannel() {
            return new SteeringReceiverClientChannel(this);
        }
        
        private class SteeringReceiverClientChannel : ChannelBase<RaceGamePhone.MiuWebService.ISteeringReceiver>, RaceGamePhone.MiuWebService.ISteeringReceiver {
            
            public SteeringReceiverClientChannel(System.ServiceModel.ClientBase<RaceGamePhone.MiuWebService.ISteeringReceiver> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoSteer(RaceGamePhone.MiuWebService.InputState state, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = state;
                System.IAsyncResult _result = base.BeginInvoke("DoSteer", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDoSteer(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DoSteer", _args, result)));
                return _result;
            }
        }
    }
}
